name: Build & Release Electron App

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      draft:
        description: 'Create as draft release'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      prerelease:
        description: 'Mark as pre-release'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  build:
    name: Build - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: packages/reader/package-lock.json

      - name: Install dependencies
        working-directory: packages/reader
        run: npm ci

      - name: Update version in package.json
        working-directory: packages/reader
        shell: bash
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TARGET_VERSION="${{ github.event.inputs.version }}"
          
          if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
            echo "Updating version from $CURRENT_VERSION to $TARGET_VERSION"
            npm version $TARGET_VERSION --no-git-tag-version
          else
            echo "Version is already $TARGET_VERSION, skipping update"
          fi

      - name: Build Electron app
        working-directory: packages/reader
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts - Windows
        if: matrix.platform == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: mokuro-enhanced-windows
          path: |
            packages/reader/release/*.exe
            packages/reader/release/*.exe.blockmap
          retention-days: 5

      - name: Upload artifacts - macOS
        if: matrix.platform == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: mokuro-enhanced-macos
          path: |
            packages/reader/release/*.dmg
            packages/reader/release/*.dmg.blockmap
          retention-days: 5

      - name: Upload artifacts - Linux
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: mokuro-enhanced-linux
          path: |
            packages/reader/release/*.AppImage
            packages/reader/release/*.AppImage.blockmap
          retention-days: 5

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Mokuro Enhanced Reader v${{ github.event.inputs.version }}
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}
          generate_release_notes: true
          files: |
            artifacts/**/*.exe
            artifacts/**/*.dmg
            artifacts/**/*.AppImage
            artifacts/**/*.blockmap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output Release URL
        run: echo "Release created at ${{ steps.create_release.outputs.url }}"

